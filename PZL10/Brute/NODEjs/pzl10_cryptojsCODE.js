var msg = "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";


function hex2a(t) 
{
    for (var e = t.toString(), i = "", n = 0; n < e.length && "00" !== e.substr(n, 2); n += 2)
        i += String.fromCharCode(parseInt(e.substr(n, 2), 16));
    return i
}

CryptoJS = require("crypto-js")

CryptoJS.algo.AES.keySize = 32,
CryptoJS.algo.EvpKDF.cfg.iterations = 1e4,
CryptoJS.algo.EvpKDF.cfg.keySize = 32;

var r
var tot = ""

const process = require('process');

for(var k = 2; k < process.argv.length; k++ )
{
    r = CryptoJS.AES.decrypt(msg, process.argv[k]); 
    result = hex2a(r)
    tot = tot + ((result.slice(0,30).search('"kty":"RSA"')>-1) ? "1" : "0")
}

console.log(tot)



